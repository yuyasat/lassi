//mixin

@mixin simple-flex($wrap: nowrap, $direction: row) {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox; // IE10 uses -ms-flexbox
  display: -ms-flex; // IE11
  display: flex;
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

@mixin flex-element($grow:0,$shrink:0,$basis:auto) {
  display: inline-block/9; /* IE9 */
  -webkit-flex: $grow $shrink $basis;
  -ms-flex: $grow $shrink $basis;
  flex: $grow $shrink $basis;
}


@mixin justify($justify: flex-start) {
  @if $justify == space-between {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
     -ms-flex-pack: justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
  } @else {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
     -ms-flex-pack: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
  }
}

@mixin align-items($align: stretch) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-flex-align: $align;
      -ms-align-items: $align;
          align-items: $align;
}
@mixin align-self($align: stretch) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

@mixin align-content($align: stretch) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

@mixin column($columns) {
  column-count: $columns;
  -moz-column-count: $columns;
  -webkit-column-count: $columns;
  -o-column-count: $columns;
  -ms-column-count: $columns;
}

@mixin clearfix {
  &:after {
    content: "";
    display: block;
    clear: both;
  }
}

@mixin fa($content:"\f071") {
  font-family: FontAwesome;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-weight: normal;
  line-height: 1;
  display: inline-block;
  text-align: right;
  content: "#{$content}";
}

@mixin hover-opacity($duration,$opacity) {
  @include transition-property(opacity);
  @include transition-duration(#{$duration});
  &:hover {
    opacity: $opacity;
  }
}

@mixin blur($blur) {
  -webkit-filter: blur($blur);
  -moz-filter: blur($blur);
  -o-filter: blur($blur);
  -ms-filter: blur($blur);
  filter: blur($blur);
}

@mixin placeholder-color($color) {
     &:-moz-placeholder {
         color:$color;
     }
     &::-webkit-input-placeholder {
         color:$color;
     }
 }

@mixin triangle($size: 8px, $color: $main-color, $side: top, $position: 50%, $direction: regular) {
  content: "";
  border: solid transparent;
  display: inline-block;
  position: absolute;
  border-width: $size;
  @if $direction == reverse {
    @if $side == top {
      border-bottom-color: $color;
      border-bottom-width: $size*2*0.85;
      margin-left: -$size;
      left: $position;
      bottom: -($size * 2);
    }
    @elseif $side == right {
      border-left-color: $color;
      border-left-width: $size*2*0.85;
      margin-top: -$size;
      left: -($size * 2);
      top: $position;
    }
    @elseif $side == bottom {
      border-top-color: $color;
      border-top-width: $size*2*0.85;
      margin-left: -$size;
      left: $position;
      top: -($size * 2);
    }
    @else {
      border-right-color: $color;
      border-right-width: $size*2*0.85;
      margin-top: -$size;
      right: -($size * 2);
      top: $position;
    }
  }
  @else {
    @if $side == top {
      border-bottom-width: $size*2*0.85;
      border-bottom-color: $color;
      margin-left: -$size;
      left: $position;
      top: -($size * 2);
    }
    @elseif $side == right {
      border-left-color: $color;
      border-left-width: $size*2*0.85;
      margin-top: -$size;
      right: -($size * 2);
      top: $position;
    }
    @elseif $side == bottom {
      border-top-color: $color;
      border-top-width: $size*2*0.85;
      margin-left: -$size;
      left: $position;
      bottom: -($size * 2);
    }
    @else {
      border-right-color: $color;
      border-right-width: $size*2*0.85;
      margin-top: -$size;
      left: -($size * 2);
      top: $position;
    }
  }
}

@mixin animation($duration,$name) {
  animation-duration: $duration;
  animation-name: $name;
  -moz-animation-duration: $duration;
  -moz-animation-name: $name;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $name;
}

@mixin font-size($size) {// 少数2桁まで表示
  $base-size: 16;
  $rem-size: round(($size / $base-size) * 100);
  $rem-size: $rem-size / 100;
  font-size: #{$rem-size}rem;
}

@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
    @if $orientation == vertical {
    // vertical
    background: -webkit-linear-gradient($start-color 0%, $end-color 100%);
    background: -o-linear-gradient($start-color 0%, $end-color 100%);
    background: linear-gradient($start-color 0%, $end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
  } @else if $orientation == horizontal {
    // horizontal
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  } @else {
    // radial
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin border-top-left-radius($radius) {
  -webkit-border-top-left-radius: $radius;
      -moz-border-radius-topleft: $radius;
          border-top-left-radius: $radius;
}
@mixin border-top-right-radius($radius) {
  -webkit-border-top-right-radius: $radius;
      -moz-border-radius-topright: $radius;
          border-top-right-radius: $radius;
}
@mixin border-bottom-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
      -moz-border-radius-bottomright: $radius;
          border-bottom-right-radius: $radius;
}
@mixin border-bottom-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
      -moz-border-radius-bottomleft: $radius;
          border-bottom-left-radius: $radius;
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -moz-transform: rotate($degrees);
  -ms-transform: rotate($degrees);
  -o-transform: rotate($degrees);
  transform: rotate($degrees);
}

@mixin transition-method($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

@mixin transition($transition-property, $transition-time) {
	-webkit-transition: $transition-property $transition-time;
	-moz-transition: $transition-property $transition-time;
	-ms-transition: $transition-property $transition-time;
	-o-transition: $transition-property $transition-time;
	transition: $transition-property $transition-time;
}
